Primer Parcial - Haskell.
1do Cuatrimestre 2024.
TEMA A.


Ejercicio 1 [2 puntos] 

problema hayQueCodificar (c: Char, mapeo: seq <Char x Char>) : Bool {
    requiere: { No hay elementos repetidos entre las primeras componentes de mapeo }
    requiere: { No hay elementos repetidos entre las segundas componentes de mapeo } 
    asegura: { res = True <=> c es igual a la primer componente de alguna tupla de mapeo }
} 


Ejercicio 2 [2 puntos] 

problema cuantasVecesHayQueCodificar (c: Char, frase: seq <Char>, mapeo: seq <Char x Char>) : Z {
    requiere: { No hay elementos repetidos entre las primeras componentes de mapeo }
    requiere: { No hay elementos repetidos entre las segundas componentes de mapeo } 
    requiere: { |frase| > 0 }
    requiere: { c pertenece a frase } 
    asegura: { (res = 0 y hayQueCodificar (c, mapeo) = False) o (res = cantidad de veces que c aparece
               en frase y hayQueCodificar (c, mapeo) = True) } 
} 


Ejercicio 3 [2 puntos] 

problema laQueMasHayQueCodificar (frase: seq <Char>, mapeo: seq <Char x Char>) : Char {
    requiere: { No hay elementos repetidos entre las primeras componentes de mapeo }
    requiere: { No hay elementos repetidos entre las segundas componentes de mapeo }
    requiere: { |frase| > 0 } 
    requiere: { Existe al menos un c que pertenece a frase y hayQueCodificar (c, mapeo) = True }
    asegura: { res = c donde c es el caracter tal que cuantasVecesHayQueCodificar (c, frase, mapeo)
             es mayor a cualquier otro caracter perteneciente a frase }
    asegura: { Si existen más de un caracter c que cumplen la condición anterior, devuelve el que 
             aparece primero en frase } 
} 


Ejercicio 4 [2 puntos] 

problema codificarFrase (frase: seq <Char>, mapeo: <Char x Char>) : seq <Char> {
    requiere: { No hay elementos repetidos entre las primeras componentes de mapeo }
    requiere: { No hay elementos repetidos entre las segundas componentes de mapeo } 
    requiere: { |frase| > 0 }
    asegura: { |res| = |frase| } 
    asegura: { Para todo 0 <= i < |frase| si hayQueCodificar (frase [i], mapeo) = True 
             entonces res [j] = (mapeo [j]1, para un j tal que 0 <= j < |mapeo| y 
             mapeo [j]0 = frase [i]) } 
    asegura: { Para todo 0 <= i < |frase| si hayQueCodificar (frase [i], mapeo) = False
             entonces res [i] = frase [i] } 
} 


Ejercicio 5 [1 punto] 

Conteste marcando la opción correcta. Si un usuario no cumple con la precondición de la especificación
de un programa y el programa no termina (se cuelga): 

__ El usuario tiene derecho a quejarse porque el programador debería haber contemplado ese caso.
__ El usuario no tiene derecho a quejarse, pero el programa es incorrecto porque no debería colgarse.
__ El usuario no tiene derecho a quejarse y no importa que el programa se cuelgue para este caso.

